// Mocks generated by Mockito 5.4.4 from annotations
// in nijimas/test/unit_test/usecase/user_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_auth/firebase_auth.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:nijimas/application/state/loading_provider.dart' as _i12;
import 'package:nijimas/domain/model/user_status.dart' as _i8;
import 'package:nijimas/domain/request/create_user_request.dart' as _i6;
import 'package:nijimas/domain/response/user_response.dart' as _i2;
import 'package:nijimas/repository/auth_repository.dart' as _i10;
import 'package:nijimas/repository/user_repository.dart' as _i4;
import 'package:nijimas/repository/user_status_repository.dart' as _i7;
import 'package:riverpod/src/internals.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserResponse_0 extends _i1.SmartFake implements _i2.UserResponse {
  _FakeUserResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderContainer_1 extends _i1.SmartFake
    implements _i3.ProviderContainer {
  _FakeProviderContainer_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_2<State1> extends _i1.SmartFake
    implements _i3.ProviderSubscription<State1> {
  _FakeProviderSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoDisposeNotifierProviderRef_3<T> extends _i1.SmartFake
    implements _i3.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i4.UserRepository {
  @override
  _i5.Future<_i2.UserResponse> createUser(_i6.CreateUserRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [request],
        ),
        returnValue: _i5.Future<_i2.UserResponse>.value(_FakeUserResponse_0(
          this,
          Invocation.method(
            #createUser,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.UserResponse>.value(_FakeUserResponse_0(
          this,
          Invocation.method(
            #createUser,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.UserResponse>);

  @override
  _i5.Future<_i2.UserResponse> getUser(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [uid],
        ),
        returnValue: _i5.Future<_i2.UserResponse>.value(_FakeUserResponse_0(
          this,
          Invocation.method(
            #getUser,
            [uid],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.UserResponse>.value(_FakeUserResponse_0(
          this,
          Invocation.method(
            #getUser,
            [uid],
          ),
        )),
      ) as _i5.Future<_i2.UserResponse>);
}

/// A class which mocks [UserStatusRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStatusRepository extends _i1.Mock
    implements _i7.UserStatusRepository {
  @override
  _i5.Future<_i8.UserStatus?> getUserStatus(_i9.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserStatus,
          [user],
        ),
        returnValue: _i5.Future<_i8.UserStatus?>.value(),
        returnValueForMissingStub: _i5.Future<_i8.UserStatus?>.value(),
      ) as _i5.Future<_i8.UserStatus?>);

  @override
  _i5.Future<void> createUserStatus(_i9.User? user) => (super.noSuchMethod(
        Invocation.method(
          #createUserStatus,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> toggleIsFirstSignIn(_i9.User? user) => (super.noSuchMethod(
        Invocation.method(
          #toggleIsFirstSignIn,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i10.AuthRepository {
  @override
  _i5.Stream<_i9.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i5.Stream<_i9.User?>.empty(),
        returnValueForMissingStub: _i5.Stream<_i9.User?>.empty(),
      ) as _i5.Stream<_i9.User?>);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<_i9.User?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i5.Future<_i9.User?>.value(),
        returnValueForMissingStub: _i5.Future<_i9.User?>.value(),
      ) as _i5.Future<_i9.User?>);

  @override
  _i5.Future<_i9.User?> signInAsGuest() => (super.noSuchMethod(
        Invocation.method(
          #signInAsGuest,
          [],
        ),
        returnValue: _i5.Future<_i9.User?>.value(),
        returnValueForMissingStub: _i5.Future<_i9.User?>.value(),
      ) as _i5.Future<_i9.User?>);

  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i3.Ref<State> {
  @override
  _i3.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_1(
          this,
          Invocation.getter(#container),
        ),
        returnValueForMissingStub: _FakeProviderContainer_1(
          this,
          Invocation.getter(#container),
        ),
      ) as _i3.ProviderContainer);

  @override
  T refresh<T>(_i3.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
        returnValueForMissingStub: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i3.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
        returnValueForMissingStub: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i3.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  T watch<T>(_i3.AlwaysAliveProviderListenable<T>? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
        returnValueForMissingStub: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i3.ProviderSubscription<T> listen<T>(
    _i3.AlwaysAliveProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_2<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
        returnValueForMissingStub: _FakeProviderSubscription_2<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i3.ProviderSubscription<T>);
}

/// A class which mocks [Loading].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoading extends _i1.Mock implements _i12.Loading {
  @override
  _i3.AutoDisposeNotifierProviderRef<bool> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAutoDisposeNotifierProviderRef_3<bool>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeAutoDisposeNotifierProviderRef_3<bool>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.AutoDisposeNotifierProviderRef<bool>);

  @override
  bool get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set state(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setTrue() => super.noSuchMethod(
        Invocation.method(
          #setTrue,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setFalse() => super.noSuchMethod(
        Invocation.method(
          #setFalse,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    bool? previous,
    bool? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
